function [merge_starttime_filtered, result, songBPM, Fs] = audioToMatrix(fname, dpath, frame_beats, bandpass_choice)
% UI?????????????????????
% [fname, dpath]  =  uigetfile({'*.wav;*.mp3','Audio File(*.wav,*.mp3)'},'Open Audio File');
[y, Fs] = audioread(fullfile(dpath, fname));

csvfilename = [dpath fname '_bpm.csv'];
existcsv = exist(csvfilename, 'file'); % csv????????????????????????

if existcsv == 2 % csv??????????????????
    result = csvread(csvfilename);
else % csv?????????????????????=>??????????????????
    %% ????????????/?????????????????????
    % merge?????????y???1?????????????????????????????????????????????????????????
    if length(y(1,:)) == 2 % ???????????????
        % merge = (y(:, 1) - y(:, 2)); % Side??????=L-R
        merge = (y(:, 1) + y(:, 2)); % Mid??????=L+R
    elseif length(y(1,:)) == 1 % ???????????????
        merge = y(:, 1); % ?????????????????????????????????
    end

    %% BPM??????
    songBPM = searchBPM(merge, Fs);

    %% ????????????????????????(????????????)
    pre_emphasis = 0.97; % ??????????????????????????????
    merge_high_emphasis = []; % merge_high_emphasis????????????????????????????????????
    merge_high_emphasis(1) = merge(1);
    for countData = 2 : 1 : length(merge)
        % ????????????????????????
        thisData = merge(countData) - (pre_emphasis * merge(countData - 1));
        merge_high_emphasis = [merge_high_emphasis; thisData];
    end

    %% ?????????????????????
    peak_count_frame_size = 512; % ????????????????????????????????????????????????
    peak_count_frame_max = Fs * 0.5 / peak_count_frame_size; % ?????????n???????????????
    for peak_count = 1 : peak_count_frame_max - 1
        if sum(merge_high_emphasis((peak_count - 1) * peak_count_frame_size + 1 : (peak_count - 1) * peak_count_frame_size + peak_count_frame_size, 1)) .^2 <= sum(merge_high_emphasis(peak_count * peak_count_frame_size + 1 : peak_count * peak_count_frame_size + peak_count_frame_size, 1)) .^2 && sum(merge_high_emphasis(peak_count * peak_count_frame_size + 1 : peak_count * peak_count_frame_size + peak_count_frame_size, 1)) .^2 >= sum(merge_high_emphasis((peak_count + 1) * peak_count_frame_size + 1 : (peak_count + 1) * peak_count_frame_size + peak_count_frame_size, 1)) .^2
            peak_count_start = peak_count;
        end
    end
    merge_starttime = merge_high_emphasis(peak_count_start * peak_count_frame_size : length(merge_high_emphasis),1); % merge_starttime????????????????????????

    %% FFT?????????
    frame_length = floor(Fs / (songBPM / 60) * frame_beats); %?????????????????????????????????????????????????????????
    N = floor(length(merge_starttime) / frame_length); %???????????????????????
    width_result = 22050; %????????????????????????Fs???????????????????????????????????????
    result = zeros(N, width_result); %???????????????
    window = hamming(width_result); %?????????????????????

    %% ??????????????????
    % ?????????????????????(Vocal?????????)????????????(Drum?????????)??????????????????(Bass)??????????????????????????????????????????Shure?????????????????????
    % http://www.shureblog.jp/shure-notes/%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%83%9B%E3%83%B3-%E5%91%A8%E6%B3%A2%E6%95%B0%E7%89%B9%E6%80%A7%E3%81%AE%E8%A6%8B%E6%96%B9/
    if bandpass_choice == 1 % Melody
        Wn = [150 4000]/(Fs/2); % ????????????????????????????????????0Hz???0???(Fs/2)Hz???1?????????????????????????????????
        fil = fir1(width_result, Wn ,'bandpass'); % ????????????????????????????????????
        merge_starttime_filtered = filter(fil, 1, merge_starttime);
    elseif bandpass_choice == 2 % Rhythm
        Wn = [80 4000]/(Fs/2); % ????????????????????????????????????0Hz???0???(Fs/2)Hz???1?????????????????????????????????
        fil = fir1(width_result, Wn ,'stop'); % ??????????????????????????????????????????
        merge_starttime_filtered = filter(fil, 1, merge_starttime);
    elseif bandpass_choice == 3 % Harmony
        Wn = [80 300]/(Fs/2); % ????????????????????????????????????0Hz???0???(Fs/2)Hz???1?????????????????????????????????
        fil = fir1(width_result, Wn ,'bandpass'); % ????????????????????????????????????
        merge_starttime_filtered = filter(fil, 1, merge_starttime);
    else
        merge_starttime_filtered = merge_starttime;
    end

    
    %% Instantaneous Frequency Spectrum (IFS)
    z = hilbert(merge_starttime_filtered);
    merge_starttime_filtered_instfreq = Fs/(2*pi)*diff(unwrap(angle(z)));
    
    %% FFT??????
    index = 1;
    for t = 1 : N
        frame = merge_starttime_filtered_instfreq( (t - 1) * frame_length + 1 : (t - 1) * frame_length + width_result, 1); %??????????????????
        frame_window = frame .* window; %????????????????????????
        spectrum = abs(fft(frame_window)); %???????????????????????????????????????????????????
%         result(index, :) = spectrum(1:width_result, :); %??????????????????????????????????????????
        result(index, :) = spectrum(1:width_result, :) - mean(spectrum(1:width_result, :)); %????????????????????????????????????????????????????????????????????????
        result(index, :) = result(index, :) - min(result(index, :)); %??????????????????????????????????????????????????????????????????
        index = index + 1;
    end

%     result = diff(result); %????????????
%     csvwrite(csvfilename, result); %csv????????????
end

%plot(result);
end
